# SPDX-FileCopyrightText: 2025 Greenbone AG
#
# SPDX-License-Identifier: GPL-3.0-or-later

# ruff: noqa: E501

import unittest

from pontos.csaf import Vulnerability


class CSAFVulnerabilityTestCase(unittest.TestCase):
    def test_affected_product_ids(self):
        vuln = Vulnerability(
            {
                "product_status": {
                    "first_affected": ["1", "2"],
                    "first_fixed": ["3", "4"],
                    "fixed": ["5", "6"],
                    "known_affected": ["7", "8"],
                    "known_not_affected": ["9", "10"],
                    "last_affected": ["11", "12"],
                    "recommended": ["13", "14"],
                    "under_investigation": ["15", "16"],
                }
            }
        )
        exp_res = {"1", "2", "7", "8", "11", "12"}

        self.assertEqual(vuln.affected_product_ids, exp_res)

    def test_none_affected_product_ids(self):
        vuln = Vulnerability(
            {
                "product_status": {
                    "first_fixed": ["3", "4"],
                    "fixed": ["5", "6"],
                    "known_not_affected": ["9", "10"],
                    "recommended": ["13", "14"],
                    "under_investigation": ["15", "16"],
                }
            }
        )
        exp_res = set()

        self.assertEqual(vuln.affected_product_ids, exp_res)

    def test_partial_affected_product_ids(self):

        vuln = Vulnerability(
            {
                "product_status": {
                    "first_fixed": ["3", "4"],
                    "fixed": ["5", "6"],
                    "known_affected": ["7", "8"],
                    "known_not_affected": ["9", "10"],
                    "last_affected": ["11", "12"],
                    "recommended": ["13", "14"],
                    "under_investigation": ["15", "16"],
                }
            }
        )
        exp_res = {"7", "8", "11", "12"}
        self.assertEqual(vuln.affected_product_ids, exp_res)

    def test_confirmed_fixed_product_ids(self):
        vuln = Vulnerability(
            {
                "remediations": [
                    {"category": "vendor_fix", "product_ids": ["1", "2"]},
                    {"category": "wont_fix", "product_ids": ["3", "4"]},
                ],
                "product_status": {
                    "fixed": ["5"],
                    "first_fixed": ["6"],
                    "affected": ["7"],
                },
            }
        )
        exp_res = {"1", "2", "5", "6"}
        res = vuln.confirmed_fixed_product_ids
        self.assertEqual(res, exp_res)

    def test_notes_iter(self):
        vuln = Vulnerability({"notes": [{"abc": None}, {"def": None}]})
        exp_res = [{"abc": None}, {"def": None}]
        res = vuln.iter_notes()
        self.assertNotIsInstance(res, list)
        self.assertListEqual(list(res), exp_res)

    def test_empty_notes_iter(self):
        vuln = Vulnerability({})
        self.assertEqual(list(vuln.iter_notes()), [])

    def test_remediations_iter(self):
        vuln = Vulnerability({"remediations": [{"abc": None}, {"def": None}]})
        exp_res = [{"abc": None}, {"def": None}]
        res = vuln.iter_remediations()
        self.assertNotIsInstance(res, list)
        self.assertListEqual(list(res), exp_res)

    def test_empty_remediations_iter(self):
        vuln = Vulnerability({})
        self.assertEqual(list(vuln.iter_remediations()), [])
